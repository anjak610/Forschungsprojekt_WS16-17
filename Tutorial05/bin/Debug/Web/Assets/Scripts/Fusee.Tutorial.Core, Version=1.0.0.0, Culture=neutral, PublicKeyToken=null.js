/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm09 = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.PointCloud */ 

(function PointCloud$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm06.Fusee.Math.Core.float3))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm14.System.Single))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm14.TypeRef("System.Single")]), null))) ();
  };


  function PointCloud__ctor () {
    this._vertices = $S00().Construct();
    this._colors = $S00().Construct();
    this._echoIds = $S01().Construct();
    this._scanNrs = $S01().Construct();
  }; 

  function PointCloud_get_Colors () {
    return this._colors;
  }; 

  function PointCloud_get_EchoIds () {
    return this._echoIds;
  }; 

  function PointCloud_get_ScanNrs () {
    return this._scanNrs;
  }; 

  function PointCloud_get_Vertices () {
    return this._vertices;
  }; 

  function PointCloud_set_Colors (value) {
    this._colors = value;
  }; 

  function PointCloud_set_EchoIds (value) {
    this._echoIds = value;
  }; 

  function PointCloud_set_ScanNrs (value) {
    this._scanNrs = value;
  }; 

  function PointCloud_set_Vertices (value) {
    this._vertices = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.PointCloud", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PointCloud__ctor
    );

    $.Method({Static:false, Public:true }, "get_Colors", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")])), 
      PointCloud_get_Colors
    );

    $.Method({Static:false, Public:true }, "get_EchoIds", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.Generic.List`1", [$.Single])), 
      PointCloud_get_EchoIds
    );

    $.Method({Static:false, Public:true }, "get_ScanNrs", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.Generic.List`1", [$.Single])), 
      PointCloud_get_ScanNrs
    );

    $.Method({Static:false, Public:true }, "get_Vertices", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")])), 
      PointCloud_get_Vertices
    );

    $.Method({Static:false, Public:true }, "set_Colors", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")])), 
      PointCloud_set_Colors
    );

    $.Method({Static:false, Public:true }, "set_EchoIds", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Collections.Generic.List`1", [$.Single])), 
      PointCloud_set_EchoIds
    );

    $.Method({Static:false, Public:true }, "set_ScanNrs", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Collections.Generic.List`1", [$.Single])), 
      PointCloud_set_ScanNrs
    );

    $.Method({Static:false, Public:true }, "set_Vertices", 
      JSIL.MethodSignature.Action($asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")])), 
      PointCloud_set_Vertices
    );

    $.Field({Static:false, Public:false}, "_vertices", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]));

    $.Field({Static:false, Public:false}, "_colors", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]));

    $.Field({Static:false, Public:false}, "_echoIds", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Field({Static:false, Public:false}, "_scanNrs", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Property({Static:false, Public:true }, "Vertices", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]));

    $.Property({Static:false, Public:true }, "Colors", $asm14.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Math.Core.float3")]));

    $.Property({Static:false, Public:true }, "EchoIds", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Single]));

    $.Property({Static:false, Public:true }, "ScanNrs", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Single]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Renderer */ 

(function Renderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.Collections.Generic.Dictionary$b2.Of($asm07.Fusee.Serialization.MeshComponent, $asm04.Fusee.Engine.Core.Mesh))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.Fusee.Xene.CollapsingStateStack$b1.Of($asm06.Fusee.Math.Core.float4x4))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.Fusee.Xene.SceneVisitor)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderProgram)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Engine.Core.Mesh)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.Fusee.Serialization.TransformComponent)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0B.Fusee.Xene.ContainerExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("Fusee.Serialization.MeshComponent"), $asm04.TypeRef("Fusee.Engine.Core.Mesh")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function Renderer__ctor (rc) {
    this._meshes = $S00().Construct();
    this._model = new ($T02())(4);
    $T03().prototype._ctor.call(this);
    this.RC = rc;
    var vs = $T05().Get$b1($T04())("VertexShader.vert");
    var ps = $T05().Get$b1($T04())("PixelShader.frag");
    var shaderProgram = (this.RC).CreateShader(vs, ps);
    (this.RC).SetShader(shaderProgram);
    this.AlbedoParam = (this.RC).GetShaderParam(shaderProgram, "albedo");
    this.ShininessParam = (this.RC).GetShaderParam(shaderProgram, "shininess");
  }; 

  function Renderer_InitState () {
    (this._model).Clear();
    (this._model).set_Tos($T07().Identity.MemberwiseClone());
  }; 

  function Renderer_LookupMesh (mc) {
    var mesh = new JSIL.BoxedVariable(null);
    var flag = !(this._meshes).TryGetValue(mc, /* ref */ mesh);
    if (flag) {
      var expr_1C = new ($T09())();
      expr_1C.set_Vertices(mc.Vertices);
      expr_1C.set_Normals(mc.Normals);
      expr_1C.set_Triangles(mc.Triangles);
      mesh.set(expr_1C);
      (this._meshes).set_Item(mc, mesh.get());
    }
    return mesh.get();
  }; 

  function Renderer_OnMaterial (material) {
    (this.RC).SetShaderParam3f(this.AlbedoParam, material.Diffuse.Color.MemberwiseClone());
    (this.RC).SetShaderParam1f(this.ShininessParam, material.Specular.Shininess);
  }; 

  function Renderer_OnMesh (mesh) {
    (this.RC).Render(this.LookupMesh(mesh));
  }; 

  function Renderer_OnTransform (xform) {
    this._model.Tos = $S01().CallStatic($T07(), "op_Multiply", null, this._model.Tos.MemberwiseClone(), $T0D().Matrix(xform).MemberwiseClone()).MemberwiseClone();
    (this.RC.ModelView = $S01().CallStatic($T07(), "op_Multiply", null, this.View.MemberwiseClone(), (this._model).get_Tos().MemberwiseClone()).MemberwiseClone());
  }; 

  function Renderer_PopState () {
    (this._model).Pop();
    (this.RC.ModelView = $S01().CallStatic($T07(), "op_Multiply", null, this.View.MemberwiseClone(), (this._model).get_Tos().MemberwiseClone()).MemberwiseClone());
  }; 

  function Renderer_PushState () {
    (this._model).Push();
  }; 

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("Fusee.Xene.SceneVisitor"), 
      Name: "Fusee.Tutorial.Core.Renderer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Fusee.Engine.Core.RenderContext")), 
      Renderer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InitState", 
      JSIL.MethodSignature.Void, 
      Renderer_InitState
    );

    $.Method({Static:false, Public:false}, "LookupMesh", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Mesh"), [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]), 
      Renderer_LookupMesh
    );

    $.Method({Static:false, Public:false}, "OnMaterial", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.MaterialComponent")), 
      Renderer_OnMaterial
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false}, "OnMesh", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.MeshComponent")), 
      Renderer_OnMesh
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false}, "OnTransform", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Serialization.TransformComponent")), 
      Renderer_OnTransform
    )
      .Attribute($asm0B.TypeRef("Fusee.Xene.VisitMethodAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "PopState", 
      JSIL.MethodSignature.Void, 
      Renderer_PopState
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PushState", 
      JSIL.MethodSignature.Void, 
      Renderer_PushState
    );

    $.Field({Static:false, Public:true }, "RC", $asm04.TypeRef("Fusee.Engine.Core.RenderContext"));

    $.Field({Static:false, Public:true }, "AlbedoParam", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:true }, "View", $asm06.TypeRef("Fusee.Math.Core.float4x4"));

    $.Field({Static:false, Public:false}, "_meshes", $asm14.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("Fusee.Serialization.MeshComponent"), $asm04.TypeRef("Fusee.Engine.Core.Mesh")]));

    $.Field({Static:false, Public:false}, "_model", $asm0B.TypeRef("Fusee.Xene.CollapsingStateStack`1", [$asm06.TypeRef("Fusee.Math.Core.float4x4")]));

    $.Field({Static:false, Public:false}, "ShininessParam", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SceneOb */ 

(function SceneOb$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };


  function SceneOb__ctor () {
    this.Albedo = $S00().Construct(0.8, 0.8, 0.8);
    this.Pos = $T00().Zero.MemberwiseClone();
    this.Rot = $T00().Zero.MemberwiseClone();
    this.Pivot = $T00().Zero.MemberwiseClone();
    this.Scale = $T00().One.MemberwiseClone();
    this.ModelScale = $T00().One.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.SceneOb", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SceneOb__ctor
    );

    $.Field({Static:false, Public:true }, "Mesh", $asm04.TypeRef("Fusee.Engine.Core.Mesh"));

    $.Field({Static:false, Public:true }, "Albedo", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Pos", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Rot", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Pivot", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Scale", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "ModelScale", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Children", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.PointVisualizationBase */ 

(function PointVisualizationBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.PointCloud)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.Fusee.Tutorial.Desktop.PointReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderProgram)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Engine.Core.Mesh)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.Fusee.Math.Core.float4)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.Predicate$b1.Of($asm07.Fusee.Serialization.MeshComponent))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.Fusee.Serialization.SceneContainer)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.Fusee.Tutorial.Core.PointVisualizationBase_$l$gc)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm11.System.Linq.Enumerable)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0B.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float4"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), $asm14.TypeRef("System.Predicate`1", ["!!0"])], ["TComponent"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function PointVisualizationBase__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function PointVisualizationBase_Init () {
    $thisType.cloud = new ($T01())();
    $thisType.preader = new ($T02())($thisType.cloud);
    $thisType.preader.writePointList();
    var shader = (this.RenderCanvas$RC$value).CreateShader("\r\n     attribute vec3 fuVertex;\r\n\r\n    void main()\r\n    {\r\n        gl_Position = vec4(fuVertex, 1.0);\r\n    }", "\r\n    #ifdef GL_ES\r\n        precision highp float;\r\n    #endif\r\n\r\n    void main()\r\n    {\r\n        gl_FragColor = vec4(1, 0, 1, 1);\r\n    }");
    (this.RenderCanvas$RC$value).SetShader(shader);
    var mesh = new ($T05())();
    mesh.set_Vertices(JSIL.Array.New($T06(), [$S00().Construct(-0.75, -0.75, 0), $S00().Construct(0.75, -0.75, 0), $S00().Construct(0, 0.75, 0)]));
    mesh.set_Triangles(JSIL.Array.New($T07(), [0, 1, 2, 3]));
    this._mesh = mesh;
    (this.RenderCanvas$RC$value.ClearColor = $S01().Construct(1, 1, 1, 1));
  }; 

  function PointVisualizationBase_LoadMesh (assetName) {
    var arg_2D_1 = null;
    var sceneContainer = $T0C().Get$b1($T0B())(assetName);
    var arg_2D_0 = sceneContainer.Children;
    if ((arg_2D_1 = $T0E().$l$g9__3_0) === null) {
      arg_2D_1 = $T0E().$l$g9__3_0 = $T0A().New($T0E().$l$g9, null, new JSIL.MethodPointerInfo($asm09.Fusee.Tutorial.Core.PointVisualizationBase_$l$gc, "$lLoadMesh$gb__3_0", $S02(), false, false));
    }
    var meshComponent = $S03().CallStatic($T10(), "First$b1", [$asm07.Fusee.Serialization.MeshComponent], $S04().CallStatic($T11(), "FindComponents$b1", [$asm07.Fusee.Serialization.MeshComponent], arg_2D_0, arg_2D_1));
    var expr_3D = new ($T05())();
    expr_3D.set_Vertices(meshComponent.Vertices);
    expr_3D.set_Normals(meshComponent.Normals);
    expr_3D.set_Triangles(meshComponent.Triangles);
    return expr_3D;
  }; 

  function PointVisualizationBase_ModelXForm (pos, rot, pivot) {
    return $S05().CallStatic($T12(), "op_Multiply", null, 
      $S05().CallStatic($T12(), "op_Multiply", null, 
        $S05().CallStatic($T12(), "op_Multiply", null, 
          $S05().CallStatic($T12(), "op_Multiply", null, 
            $T12().CreateTranslation($T06().op_Addition(pos.MemberwiseClone(), pivot).MemberwiseClone()).MemberwiseClone(), 
            $T12().CreateRotationY(rot.y).MemberwiseClone()
          ).MemberwiseClone(), 
          $T12().CreateRotationX(rot.x).MemberwiseClone()
        ).MemberwiseClone(), 
        $T12().CreateRotationZ(rot.z).MemberwiseClone()
      ).MemberwiseClone(), 
      $T12().CreateTranslation($T06().op_UnaryNegation(pivot.MemberwiseClone()).MemberwiseClone()).MemberwiseClone()
    );
  }; 

  function PointVisualizationBase_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T13().$Flags("Color", "Depth"));
    (this.RenderCanvas$RC$value).Render(this._mesh);
    this.Present();
  }; 

  function PointVisualizationBase_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspect = +((+(this.get_Width()) / +(this.get_Height())));
    var projection = $T12().CreatePerspectiveFieldOfView(0.785398, aspect, 1, 20000);
    (this.RenderCanvas$RC$value.Projection = projection.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.PointVisualizationBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PointVisualizationBase__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      PointVisualizationBase_Init
    );

    $.Method({Static:true , Public:true }, "LoadMesh", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Mesh"), [$.String]), 
      PointVisualizationBase_LoadMesh
    );

    $.Method({Static:true , Public:false}, "ModelXForm", 
      new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [
          $asm06.TypeRef("Fusee.Math.Core.float3"), $asm06.TypeRef("Fusee.Math.Core.float3"), 
          $asm06.TypeRef("Fusee.Math.Core.float3")
        ]), 
      PointVisualizationBase_ModelXForm
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      PointVisualizationBase_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      PointVisualizationBase_Resize
    );

    $.Field({Static:false, Public:false}, "_mesh", $asm04.TypeRef("Fusee.Engine.Core.Mesh"));

    $.Field({Static:true , Public:true }, "cloud", $asm09.TypeRef("Fusee.Tutorial.Core.PointCloud"));

    $.Field({Static:true , Public:true }, "preader", $asm09.TypeRef("Fusee.Tutorial.Desktop.PointReader"));

    $.Constant({Static:true , Public:false}, "_vertexShader", $.String, "\r\n     attribute vec3 fuVertex;\r\n\r\n    void main()\r\n    {\r\n        gl_Position = vec4(fuVertex, 1.0);\r\n    }");

    $.Constant({Static:true , Public:false}, "_pixelShader", $.String, "\r\n    #ifdef GL_ES\r\n        precision highp float;\r\n    #endif\r\n\r\n    void main()\r\n    {\r\n        gl_FragColor = vec4(1, 0, 1, 1);\r\n    }");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("Fusee.Engine.Common.FuseeApplicationAttribute"));

})();

/* class Fusee.Tutorial.Core.PointVisualizationBase+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lLoadMesh$gb__3_0 (c) {
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.PointVisualizationBase+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lLoadMesh$gb__3_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]), 
      $l$gc_$lLoadMesh$gb__3_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__3_0", $asm14.TypeRef("System.Predicate`1", [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Fusee.Tutorial.Desktop");
/* class Fusee.Tutorial.Desktop.PointReader */ 

(function PointReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.PointCloud)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm14.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm14.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm14.System.Char))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.Diagnostics.Debug)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm0D.TypeRef("System.String")))) ();
  };


  function PointReader__ctor (cloudinput) {
    this._cloud = cloudinput;
  }; 

  function PointReader_get_Cloud () {
    return this._cloud;
  }; 

  function PointReader_set_Cloud (value) {
    this._cloud = value;
  }; 

  function PointReader_writePointList () {
    var text = $T02().Get$b1($T01())("small_test_points.txt");
    var array = (JSIL.SplitString(text, JSIL.Array.New($T04(), ["\t"])));

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      $S00().CallStatic($T07(), "WriteLine", null, array[i]);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Desktop.PointReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Tutorial.Core.PointCloud")), 
      PointReader__ctor
    );

    $.Method({Static:false, Public:true }, "get_Cloud", 
      JSIL.MethodSignature.Return($asm09.TypeRef("Fusee.Tutorial.Core.PointCloud")), 
      PointReader_get_Cloud
    );

    $.Method({Static:false, Public:true }, "set_Cloud", 
      JSIL.MethodSignature.Action($asm09.TypeRef("Fusee.Tutorial.Core.PointCloud")), 
      PointReader_set_Cloud
    );

    $.Method({Static:false, Public:true }, "writePointList", 
      JSIL.MethodSignature.Void, 
      PointReader_writePointList
    );

    $.Field({Static:false, Public:false}, "_cloud", $asm09.TypeRef("Fusee.Tutorial.Core.PointCloud"));

    $.Property({Static:false, Public:true }, "Cloud", $asm09.TypeRef("Fusee.Tutorial.Core.PointCloud"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

